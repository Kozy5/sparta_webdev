비선점 스케쥴링(Non-Preemptive Scheduling)

#프로세스 종료 or I/O 등 이벤트가 있을때까지 실행 보장(처리시간 예측 용이)

어떤 프로세스가 CPU를 할당받으면 그 프로세스가 종료되거나,
입출력 요구가 발생하여
자벌적으로 중지될때까지 계속 실행되도록 보장하는 방법입니다.

● 순서대로 처리되는 공정성 / 다음 처리 프로세스 상관X 응답시간 예상 가능
● 선점방식보다 스케쥴러 호출 빈도↓ / 문맥교환에 의한 오버헤드↓
● 일괄처리 시스템에 적합 / 자칫 CPU사용시간 긴 프로세스 -> 타 프로세스 대기
단점 : 처리율이 떨어질 수 있다. 

비선점 1. FCFS(First Come, First Serve)
# FCFS 특징 
● 큐에 도착한 순서대로 CPU할당
● 실행 시간이 짧은게 뒤로가면 평균대기 시간이 길어짐

● 비 선점형이며 FIFO큐(먼저 입력된것 먼저 출력)를 이용하여 간단하게 구현함
● 다만 Convoy Effect(호위 효과)가 발생하는데, 긴 처리 시간의 프로세스가 선점되어버리면
나머지 프로세들은 끝날때까지 대기해야함
●따라서 먼저 도착한 프로세스의 버스트 타임에 따라서 평균 대기시간의 편차가 큽니다.


비선점 2.  SJF(Shorted Job First)
 
# SJF 특징
● 수행시간 가장 짧은 작업 먼저 수행
● FCFS 보다 평균 대기 시간 감소, 짧은 작업에 유리

CPU버스트 타임이 가장 짦은, 최단작업 우선 스케쥴링 알고리즘

● 가장 적은 평균 대기 시간
● 만약 CPU버스트 시간이 동일 -> FCFS방식 따름
● 다만 선점형 =  FCFS방식 따름 
    비 선점형 = 최소잔여시간우선 법칙 따름

현재 CPU에 할당된 프로세스의 남은 잔여시간 VS 뉴 프로세스 CPU버스트 타임 / 비교 
-> 더 적은 프로세스에게 할당

최적이긴함! 하지만! 다음 프로세스 버스트시간 계산 어려움
'비슷할것이다'라고 추측을 통해 진행하기도 함



비선점 3.HRN (Highest Response-ratio Next)
# HRN 특징

● 우선순위를 계산하여 점유 불평등 보완(SJF 단점 보완)
● 우선순위 = (대기시간 + 실행시간) / (실행시간)

 1-3. 스케쥴링 동작시점

 프로세스의 상태변화와 스케쥴링

스케쥴링 알고리즘에 따라 프로세스들은 상태변화가 일어나며 
준비/수행 상태일때 CPU를 사용하게 됩니다.

아래 그림에서 

- 🟠은 프로세스들의 상태를 의미하고
- 🔜 은 스케쥴링에 따라 상태가 변화되는 동작을 의미합니다.

 
